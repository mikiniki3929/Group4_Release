{"version":3,"sources":["components/Header.js","server-side-program/functions.js","components/TrainList.js","components/Timetable.js","components/Direction.js","components/Select_emergency.js","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js","components/image/direction_back.svg","components/image/direction.svg","components/image/warning.svg","components/image/exits_place.svg"],"names":["useStyle","makeStyles","appbar","backgroundColor","appbar_emergency","alignItems","Header","classes","Box","sx","flexGrow","AppBar","position","className","Toolbar","Typography","variant","component","Header_emergency","getJsonTimeArray","jsonObject","array","i","length","push","Object","values","findOriginIndex","t_a","start_time","g_t","Number","slice","trainListMaker","result","whichDirection","d_t","a_t","now","Date","getNowTime","d","getTimeIncludeSec","a","Math","abs","getTime","c_t","Year","getFullYear","Month","getMonth","Day","getDate","Hour","getHours","Min","getMinutes","Sec","getSeconds","t","text","width","time","marginLeft","marginRight","fontWeight","timeDp","timeDs","myTrain","dp","ds","TrainList","props","ttGinza","timeTableGinza","ttTokyo","timeTableTokyo","n_h","n_m","getCurrentTime","goodIndex","goodIndex_arrival","goodTrainDp","goodTrainDs","Accordion","AccordionSummary","id","Button","size","onClick","AccordionDetails","root","grid","height","marginTop","formcontrol","select","borderColor","inputlabel","color","Timetable","useState","searchBool","setSearchBool","origin","setOrigin","destination","setDestination","Grid","container","direction","align","FormControl","InputLabel","Select","labelId","label","value","onChange","event","target","MenuItem","ArrowDownward","fontSize","endIcon","Search","button","accordionlist","SwiperCore","use","EffectCoverflow","Pagination","Navigation","Direction","src","require","default","alt","navigation","centeredSlides","slidesPerView","loop","pagination","clickable","mySwiper","bottomnavigation","bottom","icon","App","React","setValue","exact","path","box","Paper","elevation","BottomNavigation","showLabels","newValue","BottomNavigationAction","Link","to","AccessTime","PriorityHigh","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+XAQMA,EAAWC,aAAW,iBAAO,CACjCC,OAAO,CACNC,gBAAgB,WAEjBC,iBAAiB,CACfD,gBAAgB,UAChBE,WAAW,cAKR,SAASC,IACd,IAAMC,EAAUP,IACd,OACE,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,SACE,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWN,EAAQL,OAA5C,SACE,cAACY,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMR,GAAI,CAAEC,SAAU,GAAzD,kDAUH,SAASQ,IACd,IAAMX,EAAUP,IAChB,OACE,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,SACE,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAQC,UAAWN,EAAQH,iBAA5C,SACE,cAACU,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMR,GAAI,CAAEC,SAAU,GAAzD,mEACW,uBADX,4D,+BCtBNS,EAAmB,SAACC,GAEtB,IADA,IAAIC,EAAQ,GACHC,EAAE,EAAGA,EAAEF,EAAW,+BAA+BG,OAAQD,IAE9DD,EAAMG,KAAKC,OAAOC,OAAON,EAAW,+BAA+BE,IAAI,IAG3E,OAAOD,GAYLM,EAAkB,SAACC,EAAKC,GAE1B,IADA,IAAIC,EAAM,EACDR,EAAE,EAAGA,EAAEM,EAAIL,OAAOD,IACvB,GAAIS,OAAuB,MAAhBF,EAAW,GAAWA,EAAWG,MAAM,GAAKH,EAAWG,MAAM,EAAE,MAAQD,OAAmB,MAAZH,EAAIN,GAAG,GAAWM,EAAIN,GAAGU,MAAM,GAAKJ,EAAIN,GAAGU,MAAM,EAAE,KACxI,GAAID,OAAOF,EAAWG,MAAM,EAAE,IAAMD,OAAOH,EAAIN,GAAGU,MAAM,EAAE,IAAK,CAC3DF,EAAMR,EACN,YAED,GAAIS,OAAuB,MAAhBF,EAAW,GAAWA,EAAWG,MAAM,GAAGH,EAAWG,MAAM,EAAE,IAAMD,OAAmB,MAAZH,EAAIN,GAAG,GAAWM,EAAIN,GAAGU,MAAM,GAAGJ,EAAIN,GAAGU,MAAM,EAAE,IAAK,CAC9IF,EAAMR,EACN,MAGR,OAAOQ,GAILG,EAAiB,SAACH,EAAKF,GACzB,IAAMM,EAAS,GAEf,OADAA,EAAOV,KAAKI,EAAII,MAAMF,EAAKA,EAAI,IACxBI,GAILC,EAAiB,SAACC,EAAKC,GACzB,IAAMC,EAAM,IAAIC,KAAKC,KACfC,EAAI,IAAIF,KAAKG,EAAkBN,IAC/BO,EAAI,IAAIJ,KAAKG,EAAkBL,IAGrC,OAFUO,KAAKC,IAAIP,EAAIQ,UAAYL,EAAEK,WAC3BF,KAAKC,IAAIP,EAAIQ,UAAYH,EAAEG,YAanCN,EAAa,WACf,IAAIO,EAAM,IAAIR,KACVS,EAAOD,EAAIE,cACXC,EAAOH,EAAII,WAAW,EACtBC,EAAML,EAAIM,UACVC,EAAOP,EAAIQ,WACXC,EAAMT,EAAIU,aACVC,EAAMX,EAAIY,aAEd,MAAM,GAAN,OAAUX,EAAV,YAAkBE,EAAlB,YAA2BE,EAA3B,YAAkCE,EAAlC,YAA0CE,EAA1C,YAAiDE,IAI/ChB,EAAoB,SAACkB,GACvB,IAAIb,EAAM,IAAIR,KACVS,EAAOD,EAAIE,cACXC,EAAOH,EAAII,WAAW,EACtBC,EAAML,EAAIM,UACVK,EAAMX,EAAIY,aAEd,MAAM,GAAN,OAAUX,EAAV,YAAkBE,EAAlB,YAA2BE,EAA3B,YAAkCQ,EAAlC,YAAuCF,I,gBCzFrC1D,EAAWC,aAAW,iBAAO,CAC/B4D,KAAK,CACDC,MAAM,OAEVC,KAAK,CACDC,WAAW,GACXC,YAAY,GACZC,WAAW,YAKfC,EAAS,GACTC,EAAS,GACPC,EAAU,SAACC,EAAGC,GAChBJ,EAASG,EACTF,EAASG,GAGAC,EAAY,SAACC,GACtB,IAAMlE,EAAUP,IACZ0E,EAAUvD,EAAiBwD,GAC3BC,EAAUzD,EAAiB0D,GAC3BhD,EDsCe,WACnB,IAAIkB,EAAM,IAAIR,KACVuC,EAAM/B,EAAIQ,WACVwB,EAAOhC,EAAIU,aACf,MAAM,GAAN,OAAUqB,EAAV,YAAiBC,GC1CAC,GACbC,EAAYtD,EAAgB+C,EAAQ7C,GACpCqD,EAAoBvD,EAAgBiD,EAAQ/C,GAC5CsD,EAAclD,EAAegD,EAAUP,GACvCU,EAAcnD,EAAeiD,EAAkBN,GAEnD,OACI,gCACI,eAACS,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACI,gBAAc,kBACdC,GAAG,iBAFP,UAII,eAACxE,EAAA,EAAD,CAAYF,UAAWN,EAAQsD,KAA/B,0BAEI,sBAAMhD,UAAWN,EAAQwD,KAAzB,SAAgCoB,EAAY,GAAG,QAEnD,cAACK,EAAA,EAAD,CAAQxE,QAAQ,WAAWyE,KAAK,QAAQC,QAAS,kBAAIrB,EAAQc,EAAY,GAAG,GAAGC,EAAY,GAAG,KAA9F,6BAEJ,cAACO,EAAA,EAAD,UACI,eAAC5E,EAAA,EAAD,2BAEI,sBAAMF,UAAWN,EAAQwD,KAAzB,SAAgCqB,EAAY,GAAG,aAK3D,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACI,gBAAc,kBACdC,GAAG,iBAFP,UAII,eAACxE,EAAA,EAAD,CAAYF,UAAWN,EAAQsD,KAA/B,gCAEI,sBAAMhD,UAAWN,EAAQwD,KAAzB,SAAgCoB,EAAY,GAAG,QAEnD,cAACK,EAAA,EAAD,CAAQxE,QAAQ,WAAWyE,KAAK,QAAQC,QAAS,kBAAIrB,EAAQc,EAAY,GAAG,GAAGC,EAAY,GAAG,KAA9F,6BAEJ,cAACO,EAAA,EAAD,UACI,eAAC5E,EAAA,EAAD,2BAEI,sBAAMF,UAAWN,EAAQwD,KAAzB,SAAgCqB,EAAY,GAAG,aAK3D,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACI,gBAAc,kBACdC,GAAG,iBAFP,UAII,eAACxE,EAAA,EAAD,CAAYF,UAAWN,EAAQsD,KAA/B,eAEI,sBAAMhD,UAAWN,EAAQwD,KAAzB,SAAgCoB,EAAY,GAAG,QAEnD,cAACK,EAAA,EAAD,CAAQxE,QAAQ,WAAWyE,KAAK,QAAQC,QAAS,kBAAIrB,EAAQc,EAAY,GAAG,GAAGC,EAAY,GAAG,KAA9F,6BAEJ,cAACO,EAAA,EAAD,UACI,eAAC5E,EAAA,EAAD,2BAEI,sBAAMF,UAAWN,EAAQwD,KAAzB,SAAgCqB,EAAY,GAAG,aAK3D,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACI,gBAAc,kBACdC,GAAG,iBAFP,UAII,eAACxE,EAAA,EAAD,CAAYF,UAAWN,EAAQsD,KAA/B,eAEI,sBAAMhD,UAAWN,EAAQwD,KAAzB,SAAgCoB,EAAY,GAAG,QAEnD,cAACK,EAAA,EAAD,CAAQxE,QAAQ,WAAWyE,KAAK,QAAQC,QAAS,kBAAIrB,EAAQc,EAAY,GAAG,GAAGC,EAAY,GAAG,KAA9F,6BAEJ,cAACO,EAAA,EAAD,UACI,eAAC5E,EAAA,EAAD,2BAEI,sBAAMF,UAAWN,EAAQwD,KAAzB,SAAgCqB,EAAY,GAAG,aAK3D,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACI,gBAAc,kBACdC,GAAG,iBAFP,UAII,eAACxE,EAAA,EAAD,CAAYF,UAAWN,EAAQsD,KAA/B,eAEI,sBAAMhD,UAAWN,EAAQwD,KAAzB,SAAgCoB,EAAY,GAAG,QAEnD,cAACK,EAAA,EAAD,CAAQxE,QAAQ,WAAWyE,KAAK,QAAQC,QAAS,kBAAIrB,EAAQc,EAAY,GAAG,GAAGC,EAAY,GAAG,KAA9F,6BAEJ,cAACO,EAAA,EAAD,UACI,eAAC5E,EAAA,EAAD,2BAEI,sBAAMF,UAAWN,EAAQwD,KAAzB,SAAgCqB,EAAY,GAAG,iBCzHjEpF,EAAWC,aAAW,iBAAO,CACjC2F,KAAK,CACH9B,MAAM,QAER+B,KAAK,CACHC,OAAO,QACPC,UAAU,QAEZC,YAAY,CACXlC,MAAM,KAEPmC,OAAO,CACL,UAAU,CACRC,YAAY,YAGhBC,WAAW,CACT,gBAAgB,CACdC,MAAM,gBAKCC,EAAY,WAEvB,IAAM9F,EAAUP,IAEhB,EAAoCsG,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAqCJ,mBAAS,IAA9C,mBAAOK,EAAP,KAAmBC,EAAnB,KAYA,OACE,sBAAK/F,UAAWN,EAAQqF,KAAxB,UACA,cAACtF,EAAD,IACA,eAACuG,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACV1G,WAAW,SACXQ,UAAWN,EAAQsF,KAJrB,UAME,cAAC9E,EAAA,EAAD,CAAYC,QAAQ,KAAKgG,MAAM,SAA/B,gCAIA,eAACC,EAAA,EAAD,CAAapG,UAAWN,EAAQyF,YAAhC,UACE,cAACkB,EAAA,EAAD,CAAY3B,GAAG,OAAO1E,UAAWN,EAAQ4F,WAAzC,kBACA,eAACgB,EAAA,EAAD,CACEC,QAAQ,OACRC,MAAM,OACN9B,GAAG,gBACH+B,MAAOb,EACP5F,UAAWN,EAAQ0F,OACnBsB,SAhCmB,SAACC,GAC1Bd,EAAUc,EAAMC,OAAOH,QAyBnB,UAQE,cAACI,EAAA,EAAD,CAAUJ,MAAM,GAAhB,SACE,wCAEF,cAACI,EAAA,EAAD,CAAUJ,MAAO,QAAjB,oEAIJ,uBACE,8BACE,cAACK,EAAA,EAAD,CAAeC,SAAS,YAE5B,uBAEA,cAAC7G,EAAA,EAAD,CAAYC,QAAQ,KAAKgG,MAAM,SAA/B,gCAIA,eAACC,EAAA,EAAD,CAAapG,UAAWN,EAAQyF,YAAhC,UACE,cAACkB,EAAA,EAAD,CAAY3B,GAAG,KAAK1E,UAAWN,EAAQ4F,WAAvC,gBACA,eAACgB,EAAA,EAAD,CACIC,QAAQ,KACRC,MAAM,KACN9B,GAAG,qBACH+B,MAAOX,EACP9F,UAAWN,EAAQ0F,OACnBsB,SAxDsB,SAACC,GAC/BZ,EAAeY,EAAMC,OAAOH,QAiDxB,UAQI,cAACI,EAAA,EAAD,CAAUJ,MAAM,GAAhB,SACA,wCAEA,cAACI,EAAA,EAAD,CAAUJ,MAAO,QAAjB,oEAIN,uBACA,cAAC9B,EAAA,EAAD,CAAQxE,QAAQ,YAAY6G,QAAS,cAACC,EAAA,EAAD,IAAYjH,UAAWN,EAAQwH,OAAQrC,QAAS,WA7DvFc,GAAeD,IA6Db,0BAGA,uBACCA,GAAc,cAAC,EAAD,CAAW1F,UAAWN,EAAQyH,uB,yECjGnDC,KAAWC,IAAI,CAACC,KAAgBC,IAAWC,MAG3C,IAAMrI,GAAWC,aAAW,iBAAO,CACjC6G,UAAU,CACRhD,MAAM,QAER+B,KAAK,CACHE,UAAU,YAIC,SAASuC,KACtB,IAAM/H,EAAUP,KAkBhB,OACE,sBAAKa,UAAU,YAAf,UACE,cAAEK,EAAF,IACA,eAAC2F,EAAA,EAAD,CACCC,WAAS,EACTC,UAAU,SACV1G,WAAW,SACXQ,UAAWN,EAAQsF,KAJpB,UAZW,GAFA1D,EAAegC,EAAOC,GAGlB,qBAAKmE,IAAKC,EAAQ,IAA8BC,QAASC,IAAI,UAE7D,qBAAKH,IAAKC,EAAQ,IAAyBC,QAASC,IAAI,SAgBnE,eAAC,IAAD,CACEC,YAAY,EACZC,gBAAgB,EAChBC,cAAe,EACfC,MAAM,EACNC,WAAY,CACVC,WAAU,GAEZnI,UAAWN,EAAQ0I,SARrB,UAUE,cAAC,IAAD,UACE,qBAAKV,IAAKC,EAAQ,IAAuBC,QAASC,IAAI,2BAExD,cAAC,IAAD,UACE,qBAAKH,IAAKC,EAAQ,IAA2BC,QAASC,IAAI,2BCrExE,ICWM1I,GAAWC,aAAW,iBAAO,CACjCiJ,iBAAiB,CACbpF,MAAM,OACNlD,SAAS,QACTuI,OAAO,EACPhJ,gBAAgB,WAEpBiJ,KAAK,CACDhD,MAAM,UACN,iBAAiB,CACbA,MAAM,cA8CDiD,GAzCH,WACV,MAAyBC,WAAe,GAAxC,mBAAOhC,EAAP,KAAaiC,EAAb,KACMhJ,EAAUP,KAGd,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,IAAIxI,UAAWoF,IACjC,cAAC,IAAD,CAAQoD,KAAK,mBAAmBxI,UAAWqH,QAE7C,cAAC9H,EAAA,EAAD,CAAKK,UAAWN,EAAQmJ,IAAxB,SACI,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACI,eAACC,EAAA,EAAD,CACIC,YAAU,EACVxC,MAAOA,EACPC,SAAU,SAACC,EAAMuC,GACfR,EAASQ,IAEXlJ,UAAWN,EAAQ2I,iBANvB,UAQI,cAACc,EAAA,EAAD,CACE/I,UAAWgJ,IACXC,GAAG,IACH7C,MAAM,qBACN+B,KAAM,cAACe,EAAA,EAAD,IACNtJ,UAAWN,EAAQ6I,OACrB,cAACY,EAAA,EAAD,CACE/I,UAAWgJ,IACXC,GAAG,oBACH7C,MAAM,2BACN+B,KAAM,cAACgB,EAAA,EAAD,IACNvJ,UAAWN,EAAQ6I,kBClDrBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACL,cAAC,GAAD,IACFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEjH5BrB,M,us5JCpBA,OAAe,cAA0B,4C,gCCAzC,OAAe,cAA0B,uC,gCCAzC,OAAe,cAA0B,qC,gCCAzC,OAAe,cAA0B,0C","file":"static/js/main.0bbb534b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport { AppBar } from \"@material-ui/core\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Toolbar } from \"@material-ui/core\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\n//ローカルcss\r\nconst useStyle = makeStyles(() => ({\r\n  appbar:{\r\n   backgroundColor:'#8bc24a', \r\n  },\r\n  appbar_emergency:{\r\n    backgroundColor:'#8bc24a', \r\n    alignItems:\"center\"\r\n  }\r\n}))\r\n\r\n//時刻表検索のヘッダー\r\nexport function Header() {\r\n  const classes = useStyle()\r\n    return (\r\n      <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar position=\"fixed\" className={classes.appbar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h5\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n              時刻表検索\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  //方向指示のヘッダー\r\n  export function Header_emergency(){\r\n    const classes = useStyle()\r\n    return(\r\n      <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar position=\"fixed\" className={classes.appbar_emergency}>\r\n          <Toolbar>\r\n            <Typography variant=\"h5\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n              最寄りの駅の方向に<br />避難してください\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    );\r\n  }","//APiによって取得したJSONファイルをダンプする関数　url:APIのURL\r\nconst getJsonData = (url) => {\r\n    let apiData = [{}];\r\n    fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        apiData.push(data);\r\n        apiData.shift();\r\n    });\r\n    return apiData;\r\n}\r\n\r\n//ローカルに存在するJSOnファイルの読み込み data:読み込んだJSONファイル\r\nconst readLocalJson = (data) => {\r\n    const jsonObject = JSON.parse(data);\r\n    return jsonObject;\r\n}\r\n\r\n//importしたStationTimeTableJSONオブジェクト内の時間を配列に代入して返す関数\r\nconst getJsonTimeArray = (jsonObject) => {\r\n    let array = [];\r\n    for (let i=0; i<jsonObject[\"odpt:stationTimetableObject\"].length; i++){\r\n        //array = array.push(jsonObject[\"odpt:stationTimetableObject\"][i][\"odpt:departureTime\"]);\r\n        array.push(Object.values(jsonObject[\"odpt:stationTimetableObject\"][i])[3]);\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\n/**現在の日時から時間と分を \"ab:cd\"のstring値として取り出すプログラム \r\n * const now = new Date;\r\n * let start_time = `${now.getHours()}:${now.getMinutes()}`;\r\n * \r\n * \r\n * ODから出発時間を配列に格納して取り出すプログラム\r\n*/\r\n\r\n//利用可能な電車の情報を出力する関数　t_a:発車時間のOD start_time: 予定している出発時間\r\nconst findOriginIndex = (t_a, start_time) => {\r\n    let g_t = 0;\r\n    for (let i=0; i<t_a.length;i++) {\r\n        if (Number(start_time[0]===\"0\" ? start_time.slice(1) : start_time.slice(0,2)) === Number(t_a[i][0]===\"0\" ? t_a[i].slice(1) : t_a[i].slice(0,2))) {\r\n            if (Number(start_time.slice(3,5)) < Number(t_a[i].slice(3,5))) {\r\n                g_t = i;\r\n                break;\r\n            }\r\n        } else if (Number(start_time[0]===\"0\" ? start_time.slice(1):start_time.slice(0,2)) < Number(t_a[i][0]===\"0\" ? t_a[i].slice(1):t_a[i].slice(0,2))) {\r\n            g_t = i;\r\n            break;\r\n        }\r\n    }\r\n    return g_t;\r\n}\r\n\r\n//利用可能な電車の情報を出力する関数 g_t:開始インデックス\r\nconst trainListMaker = (g_t, t_a) => {\r\n    const result = [];\r\n    result.push(t_a.slice(g_t, g_t+5))\r\n    return result;\r\n}\r\n\r\n//電車の運行情報から進行方向か逆方向のどちらに進むべきかの判定　c_t:現在時間, d_t:発車時間, a_t:到着時間\r\nconst whichDirection = (d_t, a_t) => {\r\n    const now = new Date(getNowTime());\r\n    const d = new Date(getTimeIncludeSec(d_t));\r\n    const a = new Date(getTimeIncludeSec(a_t));\r\n    const x = Math.abs(now.getTime() - d.getTime());\r\n    const y = Math.abs(now.getTime() - a.getTime());\r\n    return x < y ? true : false;\r\n}\r\n\r\n//現在時間を取得する関数\r\nconst getCurrentTime = () => {\r\n    let c_t = new Date();\r\n    let n_h = c_t.getHours(); // 時間を抜き出す\r\n    let n_m  = c_t.getMinutes(); // 分数を抜き出す\r\n    return `${n_h}:${n_m}`;\r\n}\r\n\r\n//現在の時間を取得する関数\r\nconst getNowTime = () => {\r\n    let c_t = new Date();\r\n    let Year = c_t.getFullYear();\r\n    let Month =c_t.getMonth()+1;\r\n    let Day = c_t.getDate();\r\n    let Hour = c_t.getHours();\r\n    let Min = c_t.getMinutes();\r\n    let Sec = c_t.getSeconds();\r\n\r\n    return `${Year}-${Month}-${Day} ${Hour}:${Min}:${Sec}`\r\n}\r\n\r\n//whichDirectionの時間計算用のデータ加工関数\r\nconst getTimeIncludeSec = (t) => {\r\n    let c_t = new Date();\r\n    let Year = c_t.getFullYear();\r\n    let Month =c_t.getMonth()+1;\r\n    let Day = c_t.getDate();\r\n    let Sec = c_t.getSeconds();\r\n\r\n    return `${Year}-${Month}-${Day} ${t}:${Sec}`\r\n}\r\n\r\nexport { getJsonData, readLocalJson, getJsonTimeArray, findOriginIndex, trainListMaker, whichDirection, getCurrentTime, getNowTime, getTimeIncludeSec };","import * as React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Accordion, Button } from '@material-ui/core';\r\nimport { AccordionSummary } from '@material-ui/core';\r\nimport { AccordionDetails } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport { getCurrentTime, getJsonTimeArray, findOriginIndex, trainListMaker } from \"../server-side-program/functions\";\r\nimport timeTableGinza from \"../open-data/timeTableGinzaToIkebukuroWeekday.json\";\r\nimport timeTableTokyo from \"../open-data/timeTableTokyoToIkebukuroWeekday.json\";\r\n\r\n//ローカルcss\r\nconst useStyle = makeStyles(() => ({\r\n    text:{\r\n        width:\"85%\"\r\n    },\r\n    time:{\r\n        marginLeft:15,\r\n        marginRight:30,\r\n        fontWeight:\"bold\"\r\n    }\r\n}))\r\n\r\n//exportする変数\r\nlet timeDp = \"\";\r\nlet timeDs = \"\";\r\nconst myTrain = (dp,ds) =>{\r\n    timeDp = dp;\r\n    timeDs = ds;\r\n}\r\n\r\nexport const TrainList = (props) => {\r\n    const classes = useStyle()\r\n    let ttGinza = getJsonTimeArray(timeTableGinza);\r\n    let ttTokyo = getJsonTimeArray(timeTableTokyo);\r\n    let start_time = getCurrentTime();\r\n    let goodIndex = findOriginIndex(ttGinza,start_time);\r\n    let goodIndex_arrival = findOriginIndex(ttTokyo,start_time);\r\n    let goodTrainDp = trainListMaker(goodIndex,ttGinza);\r\n    let goodTrainDs = trainListMaker(goodIndex_arrival,ttTokyo);\r\n\r\n    return(\r\n        <div>\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <Typography className={classes.text}>\r\n                        次発.\r\n                        <span className={classes.time}>{goodTrainDp[0][0]}</span>\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" size=\"small\" onClick={()=>myTrain(goodTrainDp[0][0],goodTrainDs[0][0])}>乗る</Button>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        到着.\r\n                        <span className={classes.time}>{goodTrainDs[0][0]}</span>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    aria-controls=\"panel2a-content\"\r\n                    id=\"panel2a-header\"\r\n                >\r\n                    <Typography className={classes.text}>\r\n                        次々発.\r\n                        <span className={classes.time}>{goodTrainDp[0][1]}</span>\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" size=\"small\" onClick={()=>myTrain(goodTrainDp[0][1],goodTrainDs[0][1])}>乗る</Button>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        到着.\r\n                        <span className={classes.time}>{goodTrainDs[0][1]}</span>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    aria-controls=\"panel3a-content\"\r\n                    id=\"panel3a-header\"\r\n                >\r\n                    <Typography className={classes.text}>\r\n                        3.\r\n                        <span className={classes.time}>{goodTrainDp[0][2]}</span>\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" size=\"small\" onClick={()=>myTrain(goodTrainDp[0][2],goodTrainDs[0][2])}>乗る</Button>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        到着.\r\n                        <span className={classes.time}>{goodTrainDs[0][2]}</span>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    aria-controls=\"panel4a-content\"\r\n                    id=\"panel4a-header\"\r\n                >\r\n                    <Typography className={classes.text}>\r\n                        4.\r\n                        <span className={classes.time}>{goodTrainDp[0][3]}</span>\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" size=\"small\" onClick={()=>myTrain(goodTrainDp[0][3],goodTrainDs[0][3])}>乗る</Button>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        到着.\r\n                        <span className={classes.time}>{goodTrainDs[0][3]}</span>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    aria-controls=\"panel5a-content\"\r\n                    id=\"panel5a-header\"\r\n                >\r\n                    <Typography className={classes.text}>\r\n                        5.\r\n                        <span className={classes.time}>{goodTrainDp[0][4]}</span>\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" size=\"small\" onClick={()=>myTrain(goodTrainDp[0][4],goodTrainDs[0][4])}>乗る</Button>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        到着.\r\n                        <span className={classes.time}>{goodTrainDs[0][4]}</span>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport {timeDp,timeDs}","import '../App.css';\r\nimport * as React from \"react\";\r\nimport { FormControl, InputLabel, Select, MenuItem,Typography, Grid,Button } from \"@material-ui/core\";\r\nimport {ArrowDownward} from '@material-ui/icons';\r\nimport { Search } from '@material-ui/icons';\r\nimport { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Header } from './Header';\r\nimport { TrainList } from './TrainList';\r\n\r\n//ローカルcss\r\nconst useStyle = makeStyles(() => ({\r\n  root:{\r\n    width:\"100%\",\r\n  },\r\n  grid:{\r\n    height:\"160vh\",\r\n    marginTop:\"20vh\",\r\n  },\r\n  formcontrol:{\r\n   width:250, \r\n  },\r\n  select:{\r\n    '&:after':{\r\n      borderColor:\"#8bc24a\"\r\n    }\r\n  },\r\n  inputlabel:{\r\n    \"&.Mui-focused\":{\r\n      color:\"#8bc24a\"\r\n    }\r\n  }\r\n}))\r\n\r\nexport const Timetable = () => {\r\n  //ローカルcssの宣言\r\n  const classes = useStyle()\r\n  //電車リスト表示用のステートを定義\r\n  const [searchBool, setSearchBool] = useState(false);\r\n  //選んだ路線を保持\r\n  const [origin,setOrigin] = useState('');\r\n  const [destination,setDestination] = useState('');\r\n  const originhandleChange = (event) =>{\r\n    setOrigin(event.target.value);\r\n  }\r\n  const destinationhandleChange = (event) =>{\r\n    setDestination(event.target.value);\r\n  }\r\n  //検索ボタンを引き金に電車リストの表示/非表示を切り替え\r\n  const onClickSearch = () => {\r\n    setSearchBool(!searchBool);\r\n  }\r\n  //UI\r\n  return (\r\n    <div className={classes.root}>\r\n    <Header />\r\n    <Grid\r\n      container\r\n      direction='column'\r\n      alignItems='center'\r\n      className={classes.grid}\r\n    >\r\n      <Typography variant='h6' align=\"center\">\r\n        出発駅\r\n      </Typography>\r\n\r\n      <FormControl className={classes.formcontrol}>\r\n        <InputLabel id=\"from\" className={classes.inputlabel}>From</InputLabel>\r\n        <Select\r\n          labelId=\"from\"\r\n          label=\"From\"\r\n          id=\"select-origin\"\r\n          value={origin}\r\n          className={classes.select}\r\n          onChange={originhandleChange}\r\n        >\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n          <MenuItem value={\"Ginza\"}>丸の内線　銀座駅</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <br />\r\n        <div>\r\n          <ArrowDownward fontSize=\"large\"/>\r\n        </div>\r\n      <br />\r\n\r\n      <Typography variant='h6' align=\"center\">\r\n        到着駅\r\n      </Typography>  \r\n\r\n      <FormControl className={classes.formcontrol}>\r\n        <InputLabel id=\"to\" className={classes.inputlabel}>To</InputLabel>\r\n        <Select\r\n            labelId=\"to\"\r\n            label=\"To\"\r\n            id=\"select-destination\"\r\n            value={destination}\r\n            className={classes.select}\r\n            onChange={destinationhandleChange}\r\n          >\r\n            <MenuItem value=\"\">\r\n            <em>None</em>\r\n            </MenuItem>\r\n            <MenuItem value={\"Tokyo\"}>丸の内線　東京駅</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <br />\r\n      <Button variant=\"contained\" endIcon={<Search />} className={classes.button} onClick={() => onClickSearch()}>\r\n        検索\r\n      </Button>\r\n      <br />\r\n      {searchBool && <TrainList className={classes.accordionlist}/>}\r\n\r\n    </Grid>\r\n   </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles,Grid } from '@material-ui/core';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/swiper.min.css\";\r\nimport \"swiper/swiper-bundle.css\"\r\nimport \"swiper/components/effect-coverflow\";\r\nimport \"swiper/components/pagination\";\r\nimport \"swiper/components/navigation\";\r\nimport \"./Direction.css\";\r\nimport { Navigation,Pagination } from 'swiper';\r\nimport SwiperCore,{\r\n  EffectCoverflow,\r\n} from \"swiper/core\";\r\nimport { Header_emergency } from \"./Header\";\r\nimport { GetMyTrain } from \"./GetMyTrain\";\r\nimport { timeDp, timeDs } from \"./TrainList\";\r\nimport { whichDirection } from \"../server-side-program/functions\";\r\n\r\nSwiperCore.use([EffectCoverflow,Pagination,Navigation]);\r\n\r\n//ローカルcss\r\nconst useStyle = makeStyles(() => ({\r\n  container:{\r\n    width:\"100%\"\r\n  },\r\n  grid:{\r\n    marginTop:\"10vh\",\r\n  }\r\n}))\r\n\r\nexport default function Direction() {\r\n  const classes = useStyle()\r\n  \r\n  //方向によって画像を出し分けする関数\r\n  const directionRender = () =>{\r\n    //{timeDp}\r\n    //{timeDs}\r\n    let directionDom\r\n    let result = whichDirection(timeDp,timeDs);\r\n    //let result = <GetMyTrain timeDp={timeDp} timeDs={timeDs}/>\r\n    if(result == true){\r\n      directionDom = <img src={require('./image/direction_back.svg').default} alt=\"Front\" />\r\n    }else{\r\n      directionDom = <img src={require('./image/direction.svg').default} alt=\"Back\" />\r\n    }\r\n    return directionDom\r\n  }\r\n\r\n  //UI\r\n  return (\r\n    <div className=\"container\">\r\n      < Header_emergency />\r\n      <Grid \r\n       container\r\n       direction='column'\r\n       alignItems='center'\r\n       className={classes.grid}\r\n      >\r\n          {directionRender()}\r\n          <Swiper\r\n            navigation={true}\r\n            centeredSlides={true}\r\n            slidesPerView={1}\r\n            loop={true}\r\n            pagination={{\r\n              clickable:true\r\n            }}\r\n            className={classes.mySwiper}\r\n          >\r\n            <SwiperSlide>\r\n              <img src={require('./image/warning.svg').default} alt=\"electrical_emergency\"/>\r\n            </SwiperSlide>\r\n            <SwiperSlide>\r\n              <img src={require('./image/exits_place.svg').default} alt=\"exits_place\"/>\r\n            </SwiperSlide>\r\n          </Swiper>\r\n      </Grid>\r\n      \r\n    \r\n  \r\n     </div>\r\n\r\n  );\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport { BrowserRouter,Route,Switch,Link,useRouteMatch } from 'react-router-dom';\r\nimport Direction from \"./Direction\";\r\n\r\nconst Select_Emergency = () =>{\r\n    const match = useRouteMatch();\r\n\r\n    return(\r\n        <div>\r\n            <ul>\r\n                <li>\r\n                    <Link to={'selectemergency/components'}>components</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to={'${match.url}/props'}>props</Link>\r\n                </li>\r\n            </ul>\r\n        \r\n\r\n        <Switch>\r\n            <Route path={'selectemergency/components'}>\r\n                <h3>components</h3>\r\n            </Route>\r\n            <Route path={'${match.path}/props'}>\r\n                <h3>props</h3>\r\n            </Route>\r\n        </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Select_Emergency;","import './App.css';\r\nimport * as React from \"react\";\r\nimport { BrowserRouter,Route,Switch,Link,useParams } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Box } from '@material-ui/core';\r\nimport { BottomNavigation } from '@material-ui/core';\r\nimport { BottomNavigationAction } from '@material-ui/core';\r\nimport { AccessTime } from '@material-ui/icons';\r\nimport { PriorityHigh } from '@material-ui/icons';\r\nimport { Paper } from '@material-ui/core';\r\nimport { Timetable } from './components/Timetable';\r\nimport Direction from './components/Direction';\r\nimport Select_Emergency from './components/Select_emergency';\r\n\r\n//Footerのローカルcss\r\nconst useStyle = makeStyles(() => ({\r\n  bottomnavigation:{\r\n      width:\"100%\",\r\n      position:\"fixed\",\r\n      bottom:0,\r\n      backgroundColor:'#8bc24a',\r\n  },\r\n  icon:{\r\n      color:\"#09410b\",\r\n      \"&.Mui-selected\":{\r\n          color:\"white\"\r\n      }\r\n  }\r\n}))\r\n\r\nconst App = () => {\r\n  const [value,setValue] = React.useState(0);\r\n  const classes = useStyle();\r\n\r\n    //Footer\r\n    return(\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Timetable} />\r\n          <Route  path=\"/selectemergency\" component={Direction} />\r\n        </Switch>\r\n        <Box className={classes.box}>\r\n            <Paper elevation={3}>\r\n                <BottomNavigation\r\n                    showLabels\r\n                    value={value}\r\n                    onChange={(event,newValue) =>{\r\n                      setValue(newValue);\r\n                    }}\r\n                    className={classes.bottomnavigation}   \r\n                >\r\n                    <BottomNavigationAction \r\n                      component={Link}\r\n                      to=\"/\"\r\n                      label=\"時刻表\"\r\n                      icon={<AccessTime/>} \r\n                      className={classes.icon}/>\r\n                    <BottomNavigationAction\r\n                      component={Link}\r\n                      to=\"/selectemergency/\" \r\n                      label=\"緊急避難\" \r\n                      icon={<PriorityHigh />} \r\n                      className={classes.icon}/>\r\n                    </BottomNavigation> \r\n            </Paper>\r\n        </Box>\r\n      </BrowserRouter>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/direction_back.50409241.svg\";","export default __webpack_public_path__ + \"static/media/direction.8be1203f.svg\";","export default __webpack_public_path__ + \"static/media/warning.78beb2fb.svg\";","export default __webpack_public_path__ + \"static/media/exits_place.66875205.svg\";"],"sourceRoot":""}